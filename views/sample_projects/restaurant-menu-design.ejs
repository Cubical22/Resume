<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no,
           initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Main Page Design Idea</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: monospace;
        }

        :root {
            --main-c: hsl(0, 70%, 41%);
            --main-c-dark: hsl(17, 65%, 67%);
            --bg-c: rgb(230, 230, 230);
        }

        body {
            min-height: 100vh;
            background-color: var(--bg-c);
        }

        .bg-cross-line {
            position: fixed;
            width: 100vw;
            left: 0;
            height: 100vh;
            top: 0;
            background-color: var(--main-c-dark);
            clip-path: polygon(calc(100% - 500px) 0, 100% 0, 100% 100%,
            calc(100% - 200px) 100%, calc(100% - 500px) 0);
            z-index: -2;
        }

        .floating-pizza-img {
            height: 80vh;
            aspect-ratio: 1/1;
            position: fixed;
            bottom: calc(50vh - 45%);
            right: -24%;
            animation: pizza-rotate 35s linear infinite;
            z-index: 2;

            transition: translate 1s ease-in-out;
        }

        .floating-pizza-img.hide {
            translate: 55% 0;
        }

        @keyframes pizza-rotate {
            0% {
                transform: rotate(0deg);
            }
            50% {
                transform: rotate(180deg);
            }
            100% {
                transform: rotate(360deg);
            }
        }

        @media (max-width: 480px) {
            nav {
                flex-direction: column-reverse;
                align-items: center;
            }

            .nav-control-btn {
                padding: 10px;
            }

            .main-content-holder {
                top: 120px !important;
                left: 10px !important;
                width: calc(100% - 20px) !important;
                padding-bottom: 200px;
            }
        }

        @media (max-width: 835px) {
            .floating-pizza-img {
                right: 50% !important;
                bottom: -60% !important;
                top: unset !important;
                translate: +50% 0;
            }

            .main-content-holder {
                top: 120px !important;
                left: 35px !important;
                width: calc(100% - 70px) !important;
            }

            .bottom-space {
                height: 200px;
            }

            .floating-pizza-img.hide {
                translate: 155vw 0 !important;
            }
        }

        .main-content-holder {
            position: absolute;
            top: 120px;
            left: 70px;
            width: max(calc(100vw - 50%), 417px);
        }

        .content-header {
            color: var(--bg-c);
            font-size: 3rem;
            background-color: var(--main-c);
            width: 100%;
            padding: 5px;
            margin-bottom: 10px;
            border: 5px solid #1a1a1a;


            cursor: pointer;

            transition: color 0.14s ease-out;
        }

        .content-header:hover {
            color: var(--main-c-dark);
        }

        .bottom-space {
            height: 0;
        }

        .order-list {
            border: solid black;
            border-width: 0 0 1px 0;
        }

        nav {
            position: fixed;
            width: 100%;
            display: flex;
            align-items: stretch;
            justify-content: space-between;
            background: #1a1a1a;

            z-index: 2;
        }

        .nav-controls {
            width: fit-content;
            display: flex;
            align-items: stretch;
            justify-content: space-evenly;
            column-gap: 3px;
            margin-left: 3px;
        }

        .nav-control-btn {
            height: 100%;
            font-size: 20px;
            padding: 0 10px;
            color: white;
            background: transparent;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;

            cursor: pointer;

            position: relative;
        }

        .nav-control-btn::before {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 0;
            background: var(--main-c);

            transition: height 0.14s ease-out;
        }

        .nav-control-btn:hover::before {
            height: 5px;
        }

        .page-name {
            font-size: 30px;
            margin: 10px;
            color: white;

            transition: color 0.14s ease-out;

            cursor: default;
        }

        .page-name:hover {
            color: var(--main-c);
        }

        .order {
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: space-between;

            border: solid black;
            border-width: 1px 0 0 0;

            padding: 10px;
            background-color: rgba(211, 211, 211, 0.473);

            cursor: pointer;
        }

        .order:hover {
            background-color: rgba(223, 223, 223, 0.699);
        }

        .order-ordering-side {
            display: flex;
            align-items: stretch;
            justify-content: space-evenly;
            column-gap: 10px;
        }

        .order-name, .order-prize {
            font-size: 17px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .order-ordering-side button {
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;

            cursor: pointer;

            min-height: 100%;
            aspect-ratio: 1/1;

            transition: background-color 0.14s ease-in;
        }

        .order-view-button {
            aspect-ratio: 1/1;
            background-color: var(--main-c);
            padding: 10px;
        }

        .order-view-button img {
            scale: 140%;
        }

        .order-view-button:hover {
            background-color: var(--main-c-dark);
        }

        .order-add-button {
            aspect-ratio: 1/1;
            background-color: green;
            padding: 12px;
            color: white;
        }

        .order-add-button:hover {
            background-color: rgb(62, 151, 62);
        }
    </style>
</head>
<body>
<nav>
    <div class="nav-controls">
        <div class="nav-control-btn">Home</div>
        <div class="nav-control-btn">Menu</div>
        <div class="nav-control-btn">Order</div>
        <div class="nav-control-btn">Call</div>
    </div>
    <p class="page-name">Spice On</p>
</nav>
<div class="main-content-holder">
    <h1 class="content-header">Order Right Now!</h1>
    <div class="order-list" id="order-list">
        <!-- <div class="order">
            <h3 class="order-name">peperony</h3>
            <div class="order-ordering-side">
                <p class="order-prize">10$</p>
                <button aria-describedby="view button" title="view button"
                type="button" class="order-view-button"><img src="/assets/eye-off.svg" alt=""></button>
                <button type="button" title="add to orders" class="order-add-button">+</button>
            </div>
        </div> -->
    </div>
    <div class="bottom-space"></div>
</div>

<div class="bg-cross-line"></div>
<img src="/src/restaurant/Sezar.png" alt="" class="floating-pizza-img" onerror="this.style.display = 'none'">

<!-- this script is used to add the menu as items. the point is using this approach, we will
be able to not only change these values real-time, but also even fetch them from a server, and ... -->
<script>
    const orders = [
        {name: "Peperoni", prize: 10},
        {name: "Meat", prize: 7},
        {name: "Mixed", prize: 15},
        {name: "Salad", prize: 3},
        {name: "Sezar", prize: 5},
        {name: "Burger", prize: 13},
        {name: "Shells", prize: 8},
    ];

    const list = document.getElementById("order-list");

    const orderElements = [];

    function addOrdersToList() {
        orders.forEach((order, index) => {
            const orderElement = document.createElement("div");
            orderElement.classList.add("order");
            orderElement.setAttribute("floatingImageLink", order.name);
            orderElement.innerHTML = `
            <h3 class="order-name">${order.name}</h3>
            <div class="order-ordering-side">
                <p class="order-prize">${order.prize}$</p>
                <button aria-describedby="view button" title="view button"
                onclick="updateImageByViewButton(${index})"
                type="button" class="order-view-button">
                <img src="/assets/eye-off.svg" alt="" class="off-image">
                <img src="/assets/eye-on.svg" alt="" style="display: none;" class="on-image">
                </button>
                <button type="button" title="add to orders" class="order-add-button">+</button>
            </div>
        `;

            list.appendChild(orderElement);
            orderElements.push(orderElement);
        });
    }

    addOrdersToList();

    let lastIndexSelected;
    const floatingImage = document.querySelector('.floating-pizza-img');

    function updateImageByViewButton(index) {
        // this section simply is just used to update the display on the button (not the floating image)
        if (lastIndexSelected !== undefined) {
            const onImage = orderElements[lastIndexSelected].querySelector(".on-image");
            const offImage = orderElements[lastIndexSelected].querySelector(".off-image");
            onImage.style.display = "none";
            offImage.style.display = "inline";
        }

        lastIndexSelected = index;
        const onImage = orderElements[lastIndexSelected].querySelector(".on-image");
        const offImage = orderElements[lastIndexSelected].querySelector(".off-image");

        onImage.style.display = "inline";
        offImage.style.display = "none";

        // updating the source of the the image based on the option selected. more improvements will be done lator
        // including a movement animation

        floatingImage.classList.add("hide");
        setTimeout(() => {
            floatingImage.classList.remove("hide");
            floatingImage.setAttribute("src",
                `/src/restaurant/${orderElements[lastIndexSelected].getAttribute("floatingImageLink")}.png`);
        }, 1000);

    }

    // making sure the first index is always on view by default
    updateImageByViewButton(0);
</script>
</body>
</html>